#Trigger when there is a push to main
name: Continuous Integration

on:
  # pull_request:
  #   types: [closed]
  #   branches:
  #     - main
  push:
    branches:
      - main
    
jobs:
  # Set up necessary installs
  Build_SetUp:
    name: Build SetUp
    uses: ./.github/workflows/BuildingSetUp.yml

  # Reference to Test Cases in repository
  Testing:
    name: Run Test Cases
    needs: Build_SetUp
    runs-on: ubuntu-latest
    steps:
    # Run installation of pytest in Testing from BuildingSetUp.yml
    - name: Check PyTest Installation
      if: ${{ ! needs.Build_SetUp.outputs.pytest_installed }}
      run: pip install pytest pytest-cov

    # [Edit] Retrieving from Development Repository
    - name: Checkout Development
      uses: actions/checkout@v4
      with:
        fetch: --depth=1 # Reduces clone size
        repository: DevOpsTeamB2023/DevOps_Oct2023_TeamB_Development

    # [Edit] Retrieving from Testing Repository
    - name: Checkout Testing
      uses: actions/checkout@v4
      with:
        fetch: --depth=1 # Reduces clone size
        repository: DevOpsTeamB2023/DevOps_Oct2023_TeamB_Testing

    # [Edit] Retrieve Test Cases from tdd folder and Code from microservices folder
    - name: Use Test Cases
      if: always()
      run: |
        cd $GITHUB_WORKSPACE/tdd
        pytest -v --cov=../microservices --junitxml=report.xml

    # Create Issue for Failed Workflow
    - if: ${{ failure() }}
      name: Create Issue on Failed workflow
      uses: dacbd/create-issue-action@main
      with:
        token: ${{ github.token }}
        title: Issue - `${{ github.workflow }}` failed.
        body: |
          [Failed Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          [Codebase](https://github.com/${{ github.repository }}/tree/${{ github.sha }})
          Workflow name - `${{ github.workflow }}`
          Job -           `${{ github.job }}`
          status -        `${{ job.status }}`
          assignees: `${{ github.actor }}`
        assignees: lacsadoshaniahsantiago, koayyiting
    
    # [Edit] Check tdd directory
    - name: Display tdd directory and content
      run: |
        ls -la tdd           # List contents of tdd directory
        cat tdd/report.xml   # Print contents of report.xml

    # [Edit] Create testresults directory and move test results in new directory
    - name: Create Test Results Folder
      run: |
        mkdir testresults
        if [[ -f tdd/report.xml ]]; then    #Check if report exists
          mv tdd/report.xml ./testresults
        else
          echo "report.xml not found in testcase directory."
          exit 1 #Exit with an error code
        fi
    
    # Upload test results into as artifact
    - name: Upload Test Results
      uses: actions/upload-artifact@v2
      with: 
        name: testResults
        path: testresults
  
  # Create Issue for Failing Test Results
  Test_Results:
    name: Test Cases Fail
    needs: Testing
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download Remote Test Results
        uses: actions/download-artifact@v2
        with:
          name: testResults
          path: testresults
          
      - name: Check for Failed Tests
        id: get_fails_test
        run: |
          sudo apt-get install xmlstarlet -y
          FAILED_TESTS=$(xmlstarlet sel -t -v "testsuites/testsuite[failure]" -n testresults/report.xml)

          if [[ -n "$FAILED_TESTS" ]]; then
            echo "Failed tests found: $FAILED_TESTS"
            echo "set::output name=fail::$FAILED_TESTS"
            exit 1  # Signal failure
          else
            echo "All tests passed."
          fi
          
      - name: Check Contents
        run: |
          echo "Contents of report.xml:"
          cat testresults/report.xml
          echo "Failed tests count: ${{ steps.get_fails_test.outputs.fail }}"

      # Create Issue for Fail Tests
      - name: Create Issue on Test Failure
        if: ${{ failure() }}  # Only runs if the "Check Test Results" step failed
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: "Tests Failed in ${{ github.workflow }} "
          body: |
            **Failed tests have been detected.**

            [Failed Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            [Test Results Artifact](https://github.com/${{ github.repository }}/actions/artifacts/${{ github.run_id }}/download?name=testResults)

            **Please investigate and address the failures.**
          assignees: ${{ github.actor }}
  
  # Showcase Test Results
  Test_Display:
    name: Save Test Results
    needs: Testing
    runs-on: ubuntu-latest
    steps:
    - name: Download Remote Test Results
      uses: actions/download-artifact@v2
      with:
        name: testResults

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@v2
      if: always()
      with:
        junit_files: "report.xml"
