#Trigger when there is a push to main
name: Continuous Integration

on:
  push:
  
jobs:
  # Set up necessary installs
  Build_SetUp:
    name: Build SetUp
    uses: ./.github/workflows/BuildingSetUp.yml
  
  # Reference to Test Cases in repository
  Testing:
    name: Run Test Cases
    needs: Build_SetUp
    runs-on: ubuntu-latest
    steps:
    # [Edit] Retrieving from Development Repository
    - name: Checkout Development
      uses: actions/checkout@v4
      with:
        fetch: --depth=1 # Reduces clone size
        repository: DevOpsTeamB2023/DevOps_Oct2023_TeamB_Development

    # [Edit] Test Cases
    - name: Use Test Folder
      run: go test -v ./tdd -coverageprofile=report.out

    # Upload TDD Results in https://app.codecov.io/gh/DevOpsTeamB2023/DevOps_Oct2023_TeamB_Assignment
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    # Create Issue for Failed Workflow
    - if: ${{ failure() }}
      name: Create Issue on Failed workflow
      uses: dacbd/create-issue-action@main
      with:
        token: ${{ github.token }}
        title: Issue - `${{ github.workflow }}` failed.
        body: |
          [Failed Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          [Codebase](https://github.com/${{ github.repository }}/tree/${{ github.sha }})
          Workflow name - `${{ github.workflow }}`
          Job -           `${{ github.job }}`
          status -        `${{ job.status }}`
          assignees: `${{ github.actor }}`
        assignees: lacsadoshaniahsantiago, koayyiting
    
    # [Edit] Check tdd directory
    - name: Display tdd directory and content
      run: |
        ls -la tdd          # List contents
        cat tdd/report.out  # Print contents of report.out

    # [Edit] Create testresults directory and move test results in new directory
    - name: Create Test Results Folder
      run: |
        mkdir testresults
        if [[ -f tdd/report.out ]]; then    #Check if report exists
          mv tdd/report.out ./testresults
        else
          echo "report.out not found in tdd directory."
          exit 1 #Exit with an error code
        fi
    
    # Upload test results into as artifact
    - name: Upload Test Results
      uses: actions/upload-artifact@v2
      with: 
        name: testResults
        path: testresults
  
  # Create Issue for Failing Test Results
  Test_Results:
    name: Test Cases Fail
    needs: Testing
    if: always() && ${{ success() }}
    runs-on: ubuntu-latest
    steps:
      - name: Download Remote Test Results
        uses: actions/download-artifact@v2
        with:
          name: testResults
          path: testresults
          
      - name: Check for Failed Tests
        id: get_fails_test
        run: |
          FAILED_TESTS=$(cat testresults/coverage.out | grep -E "FAIL\|error")
          if [[ -n "$FAILED_TESTS" ]]; then
            echo "Failed tests found: $FAILED_TESTS"
            echo "fail=$FAILED_TESTS" >> $GIHUB_ENV
            exit 1
          else
            echo "All tests passed."
          fi
          echo "Contents of report.out:"
          cat testresults/report.out
          echo "Failed tests count: ${{ steps.get_fails_test.outputs.fail }}"

      # Create Issue for Fail Tests
      - name: Create Issue on Test Failure
        if: ${{ failure() }}  # Only runs if the "Check Test Results" step failed
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: "Tests Failed in ${{ github.workflow }} "
          body: |
            **Failed tests have been detected.**

            [Failed Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            [Test Results Artifact](https://github.com/${{ github.repository }}/actions/artifacts/${{ github.run_id }}/download?name=testResults)

            **Please investigate and address the failures.**
          assignees: ${{ github.actor }}

  # Showcase Test Results
  Test_Display:
    name: Save Test Results
    needs: Testing
    runs-on: ubuntu-latest
    steps:
    - name: Download Remote Test Results
      uses: actions/download-artifact@v2
      with:
        name: testResults

    - name: Publish Test Results
      if: always()
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: testresults/report.out
